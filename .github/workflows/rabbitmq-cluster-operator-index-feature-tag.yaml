# .github/workflows/rabbitmq-cluster-operator-index-feature-tag.yaml

name: Tag RabbitMQ Index Image for Feature Release

# This workflow can be triggered manually or called by another workflow
on:
  # Allow manual execution from the Actions tab
  workflow_dispatch:
    inputs:
      new_tag:
        description: "The new feature release tag to apply (e.g., 18.0-fr4-latest)"
        required: true
        type: string

  # Allow this workflow to be called by another workflow
  workflow_call:
    inputs:
      new_tag:
        description: "The new feature release tag to apply (e.g., 18.0-fr4-latest)"
        required: true
        type: string
    secrets:
      IMAGENAMESPACE:
        required: true
      QUAY_USERNAME:
        required: true
      QUAY_PASSWORD:
        required: true
env:
  imageregistry: 'quay.io'
  imagenamespace: ${{ secrets.IMAGENAMESPACE || secrets.QUAY_USERNAME }}
  image: 'rabbitmq-cluster-operator-index'

jobs:
  check-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Log received new_tag input
        run: echo "Received new_tag input '${{ inputs.new_tag }}'"

      - name: Verify new_tag is not empty
        if: "${{ inputs.new_tag == '' }}"
        run: |
          echo "::error title=Input Error::The 'new_tag' input cannot be empty."
          exit 1    

  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check secrets are set
        id: check
        if: "${{ env.imagenamespace == '' }}"
        run: |
          echo "::error title=Missing required secrets::Check IMAGENAMESPACE, QUAY_USERNAME and QUAY_PASSWORD exist!"
          exit 1

  retag-and-push:
    needs:
    - check-secrets
    - check-inputs
    name: Retag and Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.imageregistry }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Check if 'latest' tag exists
        id: check-tag
        run: |
          # Exit immediately if a command fails
          set -exuo pipefail
          SOURCE_IMAGE="${{ env.imageregistry }}/${{ env.imagenamespace }}/${{ env.image }}:latest"
          echo "Checking for existence of ${SOURCE_IMAGE}..."

          # Use podman manifest inspect. It will fail if the tag doesn't exist.
          if ! podman manifest inspect "${SOURCE_IMAGE}" >/dev/null; then
            echo "::error title=Tag not found::The source tag '${SOURCE_IMAGE}' does not exist. Cannot proceed."
            exit 1
          fi
          echo "Source tag found. Proceeding."

      - name: Pull, Tag, and Push New Tag
        run: |
          # Exit immediately if a command fails
          set -euo pipefail

          IMAGE="${{ env.imageregistry }}/${{ env.imagenamespace }}/${{ env.image }}"
          SOURCE_IMAGE="${IMAGE}:latest"
          TARGET_IMAGE="${IMAGE}:${{ github.event.inputs.new_tag }}"

          echo "--> Pulling 'latest' image: ${SOURCE_IMAGE}"
          podman pull "${SOURCE_IMAGE}"

          echo "--> Applying new tag: ${{ inputs.new_tag }}"
          podman tag "${SOURCE_IMAGE}" "${TARGET_IMAGE}"

          echo "--> Pushing new tag to registry: ${TARGET_IMAGE}"
          podman push "${TARGET_IMAGE}"

          echo ""
          echo "âœ… Successfully tagged and pushed ${TARGET_IMAGE}"
