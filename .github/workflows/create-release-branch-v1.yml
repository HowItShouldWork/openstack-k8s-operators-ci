# .github/workflows/create-release-branch-v1.yml
name: Create Feature Branches in Repos v1

on:
  # This workflow can be run manually from the Actions tab.
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'Run without pushing any changes. Set to false to apply changes.'
        required: true
        type: boolean
        default: true
      BRANCH_NAME:
        description: 'The name of the new feature/release branch to create (e.g. 18.0-fr3).'
        required: true
        type: string
      NEW_VERSION:
        description: 'The new version to set in the Makefile on the main/source branch (e.g. 0.5).'
        required: true
        type: string
      FORCE_BUMP_BRANCHES:
        description: 'The new list of branches for the force-bump-branches.yaml workflow (e.g., ["main", "18.0-fr3"]).'
        required: true
        type: string       
      SOURCE_BRANCH:
        description: 'The branch to create the new branch from.'
        required: false
        type: string
        default: 'main'
      TRIGGER_BRANCH:
        description: 'The branch that must exist in a repo for it to be processed.'
        required: false
        type: string
        default: 'olive'
      VERSION_VARIABLE:
        description: 'The name of the version variable in the Makefile.'
        required: false
        type: string
        default: 'VERSION'
      BRANCH_VARIABLE:
        description: 'The name of the branch variable in the Makefile.'
        required: false
        type: string
        default: 'BRANCH'
      OPENSTACK_K8S_TAG_VARIABLE:
        description: 'The name of the OpenStack K8s tag variable in the Makefile (for install_yamls).'
        required: false
        type: string
        default: 'OPENSTACK_K8S_TAG'

jobs:
  create-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token from the GitHub App
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          echo "yq version $(yq --version) installed."
          
      - name: Checkout code (for the workflow itself)
        uses: actions/checkout@v4

      - name: Create Branches and Update Version
        env:
          # Use the token generated from the GitHub App
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          # Use current org as the ORG_NAME
          ORG_NAME: ${{ github.repository_owner }}
          # --- CONFIGURATION FROM INPUTS ---
          BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
          NEW_VERSION: ${{ inputs.NEW_VERSION }}
          VERSION_VARIABLE: ${{ inputs.VERSION_VARIABLE }}
          BRANCH_VARIABLE: ${{ inputs.BRANCH_VARIABLE }}
          OPENSTACK_K8S_TAG_VARIABLE: ${{ inputs.OPENSTACK_K8S_TAG_VARIABLE }}
          TRIGGER_BRANCH: ${{ inputs.TRIGGER_BRANCH }}
          SOURCE_BRANCH: ${{ inputs.SOURCE_BRANCH }}
          DRY_RUN: ${{ inputs.DRY_RUN }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          # --- FUNCTION DEFINITIONS ---
          # A function to handle committing and pushing changes.
          # Arguments: 1: Commit Message, 2: File(s) to add, 3: Branch to push
          commit_and_push() {
            local commit_message="$1"
            local files_to_add="$2"
            local branch_to_push="$3"

            if ! git diff --quiet -- $files_to_add; then
              echo "Showing changes for branch '${branch_to_push}':"
              git diff -- $files_to_add
              if [ "$DRY_RUN" = "true" ]; then
                echo "DRY RUN: Commit '${commit_message}' not created for branch '${branch_to_push}'."
              else
                git config --global user.name "github-actions[bot]"
                git config --global user.email "github-actions[bot]@users.noreply.github.com"
                git add $files_to_add
                git commit -m "$commit_message"
                echo "Pushing changes to ${branch_to_push}..."
                git push origin ${branch_to_push}
              fi
            else
              echo "No changes detected in '${files_to_add}'. Nothing to commit."
            fi
          }

          # --- SCRIPT START ---
          # Validate that required variables are set
          if [[ -z "$BRANCH_NAME" ]] || [[ -z "$NEW_VERSION" ]]; then
            echo "Error: Required inputs BRANCH_NAME or NEW_VERSION were not provided."
            exit 1
          fi

          if [ "$DRY_RUN" = "true" ]; then
            echo "!!! --- Running in DRY RUN mode. No changes will be pushed. --- !!!"
          fi
          
          echo "Running with the following configuration:"
          echo "Organization: ${ORG_NAME}"
          echo "Feature Branch Name: ${BRANCH_NAME}"
          echo "New Version on main: ${NEW_VERSION}"
          echo "Trigger Branch: ${TRIGGER_BRANCH}"
          echo "Source Branch: ${SOURCE_BRANCH}"
          echo "-------------------------------------------"
          
          echo "Searching for repositories in organization '${ORG_NAME}'..."
          repos=$(gh repo list $ORG_NAME --limit 1000 --json name --jq '.[] | .name')

          if [ -z "$repos" ]; then
            echo "No repositories found in the organization or permissions are missing."
            exit 1
          fi

          created_repos=""

          for repo_name in $repos; do
            echo "--- Checking repository: ${repo_name} ---"

            if [[ "$repo_name" == "rabbitmq-cluster-operator" ]]; then 
              continue
            fi

            if gh api "repos/${ORG_NAME}/${repo_name}/branches/${TRIGGER_BRANCH}" >/dev/null 2>&1; then
              echo "✅ Trigger branch '${TRIGGER_BRANCH}' found in ${repo_name}."

              TEMP_DIR=$(mktemp -d)
              echo "Cloning repository into ${TEMP_DIR}..."
              git clone "https://x-access-token:${GH_TOKEN}@github.com/${ORG_NAME}/${repo_name}.git" "$TEMP_DIR"
              
              cd "$TEMP_DIR"

              if ! git show-ref --verify --quiet "refs/remotes/origin/${SOURCE_BRANCH}"; then
                echo "⚠️ Source branch '${SOURCE_BRANCH}' does not exist in ${repo_name}. Skipping."
                cd .. && rm -rf "$TEMP_DIR"
                continue
              fi

              if git show-ref --verify --quiet "refs/remotes/origin/${BRANCH_NAME}"; then
                echo "ℹ️ Branch '${BRANCH_NAME}' already exists in ${repo_name}. Skipping this repository."
                cd .. && rm -rf "$TEMP_DIR"
                continue
              fi
              
              echo "Creating branch '${BRANCH_NAME}' from '${SOURCE_BRANCH}'..."
              git checkout ${SOURCE_BRANCH}
              git checkout -b ${BRANCH_NAME}

              if [ -f "Makefile" ]; then
                echo "Makefile found. Checking for variables to update on new branch..."
                if grep -qE "^${BRANCH_VARIABLE}\s*(\?=|=)" Makefile; then
                  sed -i -E "s/^(${BRANCH_VARIABLE}\s*(\?=|=)\s*).*/\1${BRANCH_NAME}/" Makefile
                fi
                if [[ "$repo_name" == "install_yamls" ]]; then
                  if grep -qE "^${OPENSTACK_K8S_TAG_VARIABLE}\s*(\?=|=)" Makefile; then
                    sed -i -E "s/^((${OPENSTACK_K8S_TAG_VARIABLE})\s*(\?=|=)\s*).*/\1${BRANCH_NAME}-latest/" Makefile
                  fi
                fi
                commit_and_push "[${BRANCH_NAME}] Update Makefile for ${BRANCH_NAME}" "Makefile" "${BRANCH_NAME}"
              else
                echo "No Makefile found. No changes will be committed to new branch."
              fi

              created_repos+="- ${repo_name}\n"

              if [[ "$repo_name" == "openstack-operator" ]]; then
                git reset --hard
                git checkout ${SOURCE_BRANCH}
                git pull origin ${SOURCE_BRANCH}

                if [ -f "Makefile" ]; then
                  FULL_MAKEFILE_VERSION="${NEW_VERSION}.0"
                  if grep -qE "^${VERSION_VARIABLE}\s*(:=|\?=|=)" Makefile; then
                    sed -i -E "s/^(${VERSION_VARIABLE}\s*(:=|\?=|=)).*/\1 ${FULL_MAKEFILE_VERSION}/" Makefile
                    commit_and_push "Bump version to ${NEW_VERSION}" "Makefile" "${SOURCE_BRANCH}"
                  else
                    echo "Variable '${VERSION_VARIABLE}' not found. No changes pushed to ${SOURCE_BRANCH}."
                  fi
                else
                  echo "No Makefile found. No changes pushed to ${SOURCE_BRANCH}."
                fi
              fi
              
              cd .. && rm -rf "$TEMP_DIR"
            else
              echo "❌ Trigger branch '${TRIGGER_BRANCH}' not found in ${repo_name}. Skipping."
            fi
          done

          echo "-------------------------------------------"
          if [ "$DRY_RUN" = "true" ]; then
            echo "Summary of repos where the new branch ${BRANCH_NAME} would have been created (DRY RUN):"
          else
            echo "Summary of repos where the new branch ${BRANCH_NAME} was created:"
          fi

          if [[ -n "$created_repos" ]]; then
            echo -e "$created_repos"
          else
            echo "No new branches were created."
          fi

      - name: Update openstack-k8s-operators-ci workflows
        env:
          # Use the token generated from the GitHub App
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          # Use current org as the ORG_NAME
          ORG_NAME: ${{ github.repository_owner }}
          # --- CONFIGURATION FROM INPUTS ---        
          BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
          FORCE_BUMP_BRANCHES: ${{ inputs.FORCE_BUMP_BRANCHES }}
          DRY_RUN: ${{ inputs.DRY_RUN }}
        run: |
          set -e

          # --- FUNCTION DEFINITIONS ---
          update_workflow_file() {
            local file_path="$1"
            local yq_path="$2"
            local new_value="$3"

            if [ ! -f "${file_path}" ]; then
              echo "Workflow file '${file_path}' not found. Skipping."
              return
            fi
            if ! yq -e "has(${yq_path})" "${file_path}" >/dev/null; then
              echo "Path '${yq_path}' not found in '${file_path}'. No changes made."
              return
            fi
            
            local current_value
            current_value=$(yq e "${yq_path}" "${file_path}")
            if [ "$current_value" != "$new_value" ]; then
              echo "Path '${yq_path}' found in '${file_path}'. Updating from '${current_value}' to '${new_value}'..."
              yq -i "${yq_path} = \"${new_value}\"" "${file_path}"
            else
              echo "Path '${yq_path}' in '${file_path}' is already set to '${new_value}'. No changes made."
            fi
          }

          # --- SCRIPT START ---
          echo "--- Checking repository: openstack-k8s-operators-ci ---"
          TEMP_DIR=$(mktemp -d)
          echo "Cloning repository into ${TEMP_DIR}..."
          git clone "https://x-access-token:${GH_TOKEN}@github.com/${ORG_NAME}/openstack-k8s-operators-ci.git" "$TEMP_DIR"
          cd "$TEMP_DIR"

          # Update workflows on the main branch
          git checkout main
          git pull origin main

          update_workflow_file ".github/workflows/release-branch-sync.yaml" ".on.workflow_call.inputs.source_branch.default" "${BRANCH_NAME}"
          update_workflow_file ".github/workflows/force-bump-branches.yaml" ".jobs.trigger-jobs.strategy.matrix.branch" "${FORCE_BUMP_BRANCHES}"

          # Commit and push changes if any were made
          if ! git diff --quiet .github/workflows/; then
            echo "Showing changes for main branch:"
            git diff .github/workflows/
            if [ "$DRY_RUN" = "true" ]; then
              echo "DRY RUN: CI workflow changes not committed."
            else
              git config --global user.name "github-actions[bot]"
              git config --global user.email "github-actions[bot]@users.noreply.github.com"
              git add .github/workflows/
              git commit -m "ci: Update workflow defaults for ${BRANCH_NAME}"
              echo "Pushing CI workflow updates to main branch..."
              git push origin main
            fi
          else
            echo "No updates needed in CI workflows."
          fi
          
          cd .. && rm -rf "$TEMP_DIR"
          echo "Workflow finished."
